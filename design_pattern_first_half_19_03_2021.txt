https://www.tutorialsteacher.com/articles/difference-between-design-principle-and-design-pattern

In software engineering, design principle and design pattern are not the same.

In software engineering, design principle and design pattern are not the same.

Design Principle
Design principles provide high level guidelines to design better software applications. They do not provide implementation guidelines and are not bound to any programming language. The SOLID (SRP, OCP, LSP, ISP, DIP) principles are one of the most popular sets of design principles.

For example, the Single Responsibility Principle (SRP) suggests that a class should have only one reason to change. This is a high-level statement which we can keep in mind while designing or creating classes for our application. SRP does not provide specific implementation steps but it's up to you how you implement SRP in your application.

Design Pattern
Design Pattern provides low-level solutions related to implementation, of commonly occurring object-oriented problems. In other words, design pattern suggests a specific implementation for the specific object-oriented programming problem. For example, if you want to create a class that can only have one object at a time, then you can use the Singleton design pattern which suggests the best way to create a class that can only have one object.

Design patterns are tested by others and are safe to follow, e.g. Gang of Four patterns: Abstract Factory, Factory, Singleton, Command, etc.

------------------------------------------------------------------------------------------------------------

https://www.tutorialspoint.com/design_pattern/builder_pattern.htm

Builder pattern builds a complex object using simple objects and using a step by step approach. This type of design pattern comes under creational pattern as this pattern provides one of the best ways to create an object.

A Builder class builds the final object step by step. This builder is independent of other objects.

Implementation
We have considered a business case of fast-food restaurant where a typical meal could be a burger and a cold drink. Burger could be either a Veg Burger or Chicken Burger and will be packed by a wrapper. Cold drink could be either a coke or pepsi and will be packed in a bottle.

We are going to create an Item interface representing food items such as burgers and cold drinks and concrete classes implementing the Item interface and a Packing interface representing packaging of food items and concrete classes implementing the Packing interface as burger would be packed in wrapper and cold drink would be packed as bottle.

We then create a Meal class having ArrayList of Item and a MealBuilder to build different types of Meal objects by combining Item. BuilderPatternDemo, our demo class will use MealBuilder to build a Meal.
----------------------------------------------------------------------------------------------------------
Adapter Pattern

An Adapter Pattern says that just "converts the interface of a class into another interface that a client wants".
https://dzone.com/articles/adapter-design-pattern-in-java#:~:text=The%20adapter%20design%20pattern%20is,without%20changing%20their%20existing%20code.

Adapter Design Pattern
The adapter design pattern is a structural design pattern that allows two unrelated/uncommon interfaces to work together. In other words, the adapter pattern makes two incompatible interfaces compatible without changing their existing code.
Interfaces may be incompatible, but the inner functionality should match the requirement.
The adapter pattern is often used to make existing classes work with others without modifying their source code.
Adapter patterns use a single class (the adapter class) to join functionalities of independent or incompatible interfaces/classes.
The adapter pattern also is known as the wrapper, an alternative naming shared with the decorator design pattern.
This pattern converts the (incompatible) interface of a class (the adaptee) into another interface (the target) that clients require.
The adapter pattern also lets classes work together, which, otherwise, couldn't have worked, because of the incompatible interfaces.
For example, let's take a look at a person traveling in different countries with their laptop and mobile devices. We have a different electric socket, volt, and frequency measured in different countries and that makes the use of any appliance of one country to be freely used in a different country. In the United Kingdom, we use Type G socket with 230 volts and 50 Hz frequency. In the United States, we use Type A and Type B sockets with 120 volts and 60 Hz frequency. In India, we use Type C, Type D. and Type M sockets with 230 volts and 50 Hz. lastly, in Japan, we use Type A and Type B sockets with 110 volts and 50 Hz frequency. This makes the appliances we carry incompatible with the electric specifications we have at different places.
This makes the adapter tool essential because it can make/convert incompatible code into compatible code. Please notice here that we have not achieved anything additional here — there is no additional functionality, only compatibility.

----------------------------------------------------------------------------------------------------------